import React, { useState, useEffect, useRef, useCallback } from "react";

// ===================================================================================
// ✨ CONSTANTS & CONFIGURATION ✨
// ===================================================================================

const APP_CONFIG = {
  theme: {
    primary: "#d4af37",
    secondary: "#8b4513",
    accent: "#ffd700",
    dark: "#0a0514",
    light: "#fef9e7"
  },
  animations: {
    duration: {
      short: 300,
      medium: 500,
      long: 1000
    }
  },
  messages: {
    greetings: [
      "Selamat datang di kerajaan kenangan kita",
      "Di istana tempat cinta bersemayam",
      "Tempat dimana setiap detik adalah sejarah",
      "Dan setiap kenangan adalah harta karun"
    ],
    wishes: [
      "Semoga bahagia selalu menyertaimu",
      "Semoga tawa tak pernah berhenti dari bibirmu",
      "Semoga setiap harimu dipenuhi cahaya",
      "Semoga impian dan harapanmu terwujud"
    ]
  }
};

// ===================================================================================
// ✨ ENHANCED ICON COMPONENTS (SVG) ✨
// ===================================================================================

const LanternIcon = ({ className, animated = false }) => (
  <svg className={`${className} ${animated ? 'animate-gentle-swing' : ''}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
    <path d="M16 2H8C6.9 2 6 2.9 6 4v1H4.5C4.22 5 4 5.22 4 5.5s.22.5.5.5H6v10H4.5c-.28 0-.5.22-.5.5s.22.5.5.5H6v1c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2v-1h1.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5H18V5h1.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5H18V4c0-1.1-.9-2-2-2zm-2 15h-4v-1h4v1zm0-3h-4v-1h4v1zm0-3h-4V8h4v3z" />
  </svg>
);

const CrownIcon = ({ className, glowing = false }) => (
  <svg className={`${className} ${glowing ? 'animate-pulse-gold' : ''}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 2l2.35 7.16h7.65l-6.18 4.48 2.36 7.16-6.18-4.48-6.18 4.48 2.36-7.16-6.18-4.48h7.65L12 2z" />
  </svg>
);

const StarIcon = ({ className, twinkling = false }) => (
  <svg className={`${className} ${twinkling ? 'animate-twinkle' : ''}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
  </svg>
);

const HeartIcon = ({ className, beating = false }) => (
  <svg className={`${className} ${beating ? 'animate-heartbeat' : ''}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
  </svg>
);

const MoonIcon = ({ className }) => (
  <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-2.98 0-5.4-2.42-5.4-5.4 0-1.81.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1z" />
  </svg>
);

const SunIcon = ({ className }) => (
  <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM6.34 5.16l-1.42 1.42c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0l1.42-1.42c.39-.39.39-1.02 0-1.41-.39-.39-1.02-.39-1.41 0zm13.08 12.42l1.42 1.42c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41l-1.42-1.42c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41zm-13.08 1.42l1.42-1.42c.39-.39.39-1.02 0-1.41-.39-.39-1.02-.39-1.41 0l-1.42 1.42c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0zm13.08-12.42l-1.42-1.42c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l1.42 1.42c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41z" />
  </svg>
);

// ===================================================================================
// ✨ CUSTOM HOOKS ✨
// ===================================================================================

const useOnScreen = (options = {}) => {
  const ref = useRef(null);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(([entry]) => {
      if (entry.isIntersecting) {
        setIsVisible(true);
        observer.unobserve(entry.target);
      }
    }, options);

    if (ref.current) {
      observer.observe(ref.current);
    }

    return () => {
      if (ref.current) {
        observer.unobserve(ref.current);
      }
    };
  }, [ref, options]);

  return [ref, isVisible];
};

const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.log(error);
      return initialValue;
    }
  });

  const setValue = (value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.log(error);
    }
  };

  return [storedValue, setValue];
};

const useAudio = (url) => {
  const audioRef = useRef(new Audio(url));
  const [isPlaying, setIsPlaying] = useState(false);

  const toggle = useCallback(() => {
    setIsPlaying(!isPlaying);
  }, [isPlaying]);

  useEffect(() => {
    const audio = audioRef.current;
    audio.loop = true;

    if (isPlaying) {
      audio.play().catch(e => console.log("Audio play failed:", e));
    } else {
      audio.pause();
    }

    return () => {
      audio.pause();
    };
  }, [isPlaying]);

  return [isPlaying, toggle];
};

const useMousePosition = () => {
  const [position, setPosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    const handleMouseMove = (e) => {
      setPosition({ x: e.clientX, y: e.clientY });
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  return position;
};

// ===================================================================================
// ✨ ENHANCED ANIMATION COMPONENTS ✨
// ===================================================================================

const AnimatedSection = ({ children, className = '', delay = 0 }) => {
  const [ref, isVisible] = useOnScreen({ threshold: 0.1 });

  return (
    <section
      ref={ref}
      className={`transition-all duration-1000 ease-out ${className} ${isVisible
          ? 'opacity-100 transform-none'
          : 'opacity-0 translate-y-10'
        }`}
      style={{ transitionDelay: `${delay}ms` }}
    >
      {children}
    </section>
  );
};

const Typewriter = ({ text, speed = 50, className = '' }) => {
  const [displayText, setDisplayText] = useState('');
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    if (currentIndex < text.length) {
      const timer = setTimeout(() => {
        setDisplayText(prev => prev + text[currentIndex]);
        setCurrentIndex(prev => prev + 1);
      }, speed);

      return () => clearTimeout(timer);
    }
  }, [currentIndex, text, speed]);

  return <span className={className}>{displayText}</span>;
};

// ===================================================================================
// ✨ ENHANCED BACKGROUND COMPONENTS ✨
// ===================================================================================

const FloatingLanterns = ({ count = 20 }) => {
  return (
    <div className="fixed top-0 left-0 w-full h-full -z-10 overflow-hidden pointer-events-none">
      {Array.from({ length: count }).map((_, i) => (
        <div
          key={i}
          className="lantern-bg"
          style={{
            left: `${Math.random() * 100}%`,
            animationDuration: `${15 + Math.random() * 25}s`,
            animationDelay: `${Math.random() * 30}s`,
            transform: `scale(${0.1 + Math.random() * 0.7})`,
            filter: `hue-rotate(${Math.random() * 360}deg) brightness(${0.7 + Math.random() * 0.5})`
          }}
        ></div>
      ))}
    </div>
  );
};

const ParallaxBackground = () => {
  const [offsetY, setOffsetY] = useState(0);
  const handleScroll = () => setOffsetY(window.pageYOffset);

  useEffect(() => {
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <div className="fixed top-0 left-0 w-full h-full -z-20 pointer-events-none">
      <div className="absolute inset-0 bg-night-sky"></div>
      <div
        className="absolute inset-0 bg-stars"
        style={{ transform: `translateY(${offsetY * 0.05}px)` }}
      ></div>
      <div
        className="absolute bottom-0 left-0 w-full h-1/2 bg-mountains"
        style={{ transform: `translateY(${offsetY * 0.1}px)` }}
      ></div>
      <div
        className="absolute bottom-0 left-0 w-full h-1/3 bg-castle"
        style={{ transform: `translateY(${offsetY * 0.15}px)` }}
      ></div>
    </div>
  );
};

const InteractiveParticles = () => {
  const canvasRef = useRef(null);
  const mousePosition = useMousePosition();

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const particles = [];
    const particleCount = 50;

    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 3 + 1;
        this.speedX = Math.random() * 1 - 0.5;
        this.speedY = Math.random() * 1 - 0.5;
        this.color = `hsl(${Math.random() * 60 + 30}, 70%, 60%)`;
      }

      update() {
        this.x += this.speedX;
        this.y += this.speedY;

        if (this.x > canvas.width) this.x = 0;
        else if (this.x < 0) this.x = canvas.width;
        if (this.y > canvas.height) this.y = 0;
        else if (this.y < 0) this.y = canvas.height;

        // Mouse interaction
        const dx = mousePosition.x - this.x;
        const dy = mousePosition.y - this.y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        if (distance < 100) {
          this.speedX -= dx * 0.001;
          this.speedY -= dy * 0.001;
        }
      }

      draw() {
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle());
    }

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      particles.forEach(particle => {
        particle.update();
        particle.draw();
      });

      requestAnimationFrame(animate);
    };

    animate();

    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [mousePosition]);

  return (
    <canvas
      ref={canvasRef}
      className="fixed top-0 left-0 w-full h-full -z-5 pointer-events-none opacity-30"
    />
  );
};

// ===================================================================================
// ✨ INTERACTIVE COMPONENTS ✨
// ===================================================================================

const AudioPlayer = () => {
  const [isPlaying, togglePlay] = useAudio("https://www.soundhelix.com/examples/mp3/SoundHelix-Song-8.mp3");
  const [volume, setVolume] = useLocalStorage('audioVolume', 0.7);

  return (
    <div className="fixed bottom-5 right-5 z-[100]">
      <div className="flex items-center gap-3 bg-gray-900/70 backdrop-blur-lg border border-yellow-400/30 rounded-full p-3 shadow-2xl">
        <button
          onClick={togglePlay}
          aria-label={isPlaying ? "Pause" : "Play"}
          className="w-12 h-12 rounded-full bg-yellow-500/90 hover:bg-yellow-500 text-gray-900 flex items-center justify-center transition-all duration-300 text-xl font-bold hover:scale-110 active:scale-95"
        >
          {isPlaying ? '❚❚' : '►'}
        </button>

        <div className="flex items-center gap-2">
          <span className="text-yellow-300 text-sm">🔈</span>
          <input
            type="range"
            min="0"
            max="1"
            step="0.1"
            value={volume}
            onChange={(e) => setVolume(parseFloat(e.target.value))}
            className="w-20 accent-yellow-500"
          />
          <span className="text-yellow-300 text-sm">🔊</span>
        </div>
      </div>
    </div>
  );
};

const ThemeToggle = () => {
  const [isDark, setIsDark] = useLocalStorage('theme', true);

  useEffect(() => {
    if (isDark) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [isDark]);

  return (
    <button
      onClick={() => setIsDark(!isDark)}
      className="fixed top-5 right-5 z-[100] w-12 h-12 rounded-full bg-gray-900/70 backdrop-blur-lg border border-yellow-400/30 flex items-center justify-center text-yellow-300 hover:scale-110 transition-all duration-300 shadow-2xl"
      aria-label="Toggle theme"
    >
      {isDark ? <SunIcon className="w-6 h-6" /> : <MoonIcon className="w-6 h-6" />}
    </button>
  );
};

const ScrollProgress = () => {
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    const updateProgress = () => {
      const totalHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = (window.pageYOffset / totalHeight) * 100;
      setProgress(progress);
    };

    window.addEventListener('scroll', updateProgress);
    return () => window.removeEventListener('scroll', updateProgress);
  }, []);

  return (
    <div className="fixed top-0 left-0 w-full h-1 z-[100]">
      <div
        className="h-full bg-gradient-to-r from-yellow-400 to-orange-500 transition-all duration-300"
        style={{ width: `${progress}%` }}
      />
    </div>
  );
};

const ConfettiButton = ({ children, onClick }) => {
  const createConfetti = useCallback(() => {
    const confettiCount = 50;
    const colors = ['#ffd700', '#ff6b6b', '#48dbfb', '#1dd1a1', '#f368e0'];

    for (let i = 0; i < confettiCount; i++) {
      const confetti = document.createElement('div');
      confetti.className = 'confetti';
      confetti.style.cssText = `
        position: fixed;
        width: 10px;
        height: 10px;
        background: ${colors[Math.floor(Math.random() * colors.length)]};
        top: 50%;
        left: 50%;
        opacity: 1;
        transform: translate(-50%, -50%);
        border-radius: ${Math.random() > 0.5 ? '50%' : '0'};
        pointer-events: none;
        z-index: 1000;
      `;

      document.body.appendChild(confetti);

      const angle = Math.random() * Math.PI * 2;
      const velocity = 2 + Math.random() * 2;
      const rotation = Math.random() * 720 - 360;

      confetti.animate(
        [
          {
            transform: `translate(-50%, -50%) rotate(0deg)`,
            opacity: 1
          },
          {
            transform: `translate(${Math.cos(angle) * velocity * 100}%, ${Math.sin(angle) * velocity * 100 + 100
              }%) rotate(${rotation}deg)`,
            opacity: 0
          }
        ],
        {
          duration: 1000 + Math.random() * 1000,
          easing: 'cubic-bezier(0, .9, .57, 1)',
          fill: 'both'
        }
      ).onfinish = () => confetti.remove();
    }
  }, []);

  const handleClick = (e) => {
    createConfetti();
    if (onClick) onClick(e);
  };

  return React.cloneElement(children, { onClick: handleClick });
};

// ===================================================================================
// ✨ ENHANCED CONTENT COMPONENTS ✨
// ===================================================================================

const CountdownTimer = ({ targetDate }) => {
  const [timeLeft, setTimeLeft] = useState({});

  useEffect(() => {
    const calculateTimeLeft = () => {
      const difference = +new Date(targetDate) - +new Date();
      if (difference > 0) {
        return {
          days: Math.floor(difference / (1000 * 60 * 60 * 24)),
          hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
          minutes: Math.floor((difference / 1000 / 60) % 60),
          seconds: Math.floor((difference / 1000) % 60)
        };
      }
      return {};
    };

    setTimeLeft(calculateTimeLeft());
    const timer = setInterval(() => {
      setTimeLeft(calculateTimeLeft());
    }, 1000);

    return () => clearInterval(timer);
  }, [targetDate]);

  return (
    <div className="flex gap-4 justify-center my-8">
      {Object.entries(timeLeft).map(([unit, value]) => (
        <div key={unit} className="text-center">
          <div className="bg-yellow-500/20 border border-yellow-400/30 rounded-lg p-3 min-w-16">
            <div className="text-2xl font-bold text-yellow-300">{value}</div>
            <div className="text-sm text-yellow-200/70 capitalize">{unit}</div>
          </div>
        </div>
      ))}
    </div>
  );
};

const MemoryGame = () => {
  const [cards, setCards] = useState([]);
  const [flipped, setFlipped] = useState([]);
  const [solved, setSolved] = useState([]);
  const [disabled, setDisabled] = useState(false);

  const images = [
    '🎂', '🎁', '🎀', '🎊', '🎉', '💝', '💖', '💕'
  ];

  useEffect(() => {
    const initialCards = [...images, ...images]
      .sort(() => Math.random() - 0.5)
      .map((image, index) => ({ id: index, image, flipped: false }));

    setCards(initialCards);
  }, []);

  const handleClick = (id) => {
    if (disabled || flipped.includes(id) || solved.includes(id)) return;

    const newFlipped = [...flipped, id];
    setFlipped(newFlipped);

    if (newFlipped.length === 2) {
      setDisabled(true);
      const [first, second] = newFlipped;

      if (cards[first].image === cards[second].image) {
        setSolved([...solved, first, second]);
        setFlipped([]);
        setDisabled(false);
      } else {
        setTimeout(() => {
          setFlipped([]);
          setDisabled(false);
        }, 1000);
      }
    }
  };

  return (
    <div className="grid grid-cols-4 gap-4 max-w-md mx-auto">
      {cards.map(card => (
        <div
          key={card.id}
          className={`aspect-square rounded-lg cursor-pointer transition-all duration-500 transform ${flipped.includes(card.id) || solved.includes(card.id)
              ? 'rotate-y-180 bg-yellow-100'
              : 'bg-yellow-500/30 hover:bg-yellow-500/50'
            } flex items-center justify-center text-2xl shadow-lg`}
          onClick={() => handleClick(card.id)}
        >
          {(flipped.includes(card.id) || solved.includes(card.id)) && card.image}
        </div>
      ))}
    </div>
  );
};

// ===================================================================================
// ✨ ENHANCED DATA STRUCTURES ✨
// ===================================================================================

const timelineEvents = [
  {
    year: 'November 2023',
    title: 'Titik Awal di Taman Kebijaksanaan',
    desc: 'Di bawah rindangnya Wisdom Park, takdir mempertemukan dua jiwa. Sebuah percakapan sederhana menjadi benih dari kisah agung yang kini kita rangkai.',
    image: 'img2.jpg',
    icon: '🌱',
    color: 'from-green-500/20 to-emerald-500/20'
  },
  {
    year: 'Maret 2024',
    title: 'Sumpah di Bawah Bintang',
    desc: 'Di tengah keheningan malam, kita berbagi janji. Bukan sekadar kata, melainkan sumpah hati untuk saling menjaga dalam suka dan duka.',
    image: 'img3.jpg',
    icon: '⭐',
    color: 'from-blue-500/20 to-cyan-500/20'
  },
  {
    year: 'September 2024',
    title: 'Ujian Pertama Sang Takdir',
    desc: 'Badai datang menguji kekuatan. Namun, genggaman tangan kita tak pernah lepas. Kita buktikan bahwa cinta kita lebih kuat dari segala rintangan.',
    image: 'img4.jpg',
    icon: '🌧️',
    color: 'from-purple-500/20 to-pink-500/20'
  },
  {
    year: 'Hari Ini',
    title: 'Pesta Lampion Untuk Ratu',
    desc: 'Kerajaan hatiku merayakan hari kelahiranmu. Setiap lampion yang terbang adalah doa dan harapanku untuk kebahagiaanmu. Selamat ulang tahun, Ratuku.',
    image: 'img5.jpg',
    icon: '🎂',
    color: 'from-yellow-500/20 to-orange-500/20'
  }
];

const queenQualities = [
  {
    title: 'Hati yang Tulus',
    desc: "Kebaikanmu terpancar, menerangi siapa saja yang berada di dekatmu.",
    icon: <HeartIcon className="w-8 h-8" beating={true} />,
    gradient: "from-red-500/20 to-pink-500/20"
  },
  {
    title: 'Senyum Penuh Sihir',
    desc: "Satu senyumanmu mampu meruntuhkan segala gundah dan lara.",
    icon: <StarIcon className="w-8 h-8" twinkling={true} />,
    gradient: "from-yellow-500/20 to-amber-500/20"
  },
  {
    title: 'Jiwa yang Kuat',
    desc: "Engkau adalah benteng yang kokoh, tegar menghadapi badai apapun.",
    icon: <CrownIcon className="w-8 h-8" glowing={true} />,
    gradient: "from-purple-500/20 to-indigo-500/20"
  },
  {
    title: 'Tawa yang Merdu',
    desc: "Tawamu adalah alunan musik terindah yang selalu ingin kudengar.",
    icon: <LanternIcon className="w-8 h-8" animated={true} />,
    gradient: "from-blue-500/20 to-cyan-500/20"
  },
];

const loveMessages = [
  "Dalam setiap hembusan nafas, ada rindu yang tak terucap",
  "Mataku mencari wajahmu dalam keramaian, hatiku menemukanmu dalam kesendirian",
  "Kau adalah puisi yang tak pernah selesai kutunggu setiap barisnya",
  "Di antara bintang-bintang, senyummu adalah yang paling terang",
  "Cinta kita bagai lampion, semakin gelap malam, semakin terang bersinar"
];

const galleryImages = [
  { src: 'img6.jpg', caption: 'Momen Bahagia #1', date: '2023' },
  { src: 'img7.jpg', caption: 'Tawa Ceria #2', date: '2024' },
  { src: 'img8.jpg', caption: 'Kenangan Manis #3', date: '2023' },
  { src: 'img9.jpg', caption: 'Senyum Indah #4', date: '2024' },
  { src: 'img10.jpg', caption: 'Kebersamaan #5', date: '2023' },
  { src: 'img11.jpg', caption: 'Petualangan #6', date: '2024' },
  { src: 'img12.jpg', caption: 'Kejutan #7', date: '2023' },
  { src: 'img13.jpg', caption: 'Canda #8', date: '2024' }
];

const royalDecree = `Dengan nama cinta yang bersemayam di singgasana hati, titah ini diturunkan untuk Sang Ratu, Rofiatul Karomah. 

Di hari agung kelahiranmu, seluruh semesta turut merayakan. Bintang-bintang merangkai namamu, dan angin malam membisikkan lagu pujian untukmu. 

Ketahuilah, Wahai Ratuku, engkaulah pusat dari kerajaanku. Senyummu adalah mentari pagi, dan tawamu adalah musik terindah di balairung istana. 

Setiap langkahmu adalah anugerah, dan keberadaanmu adalah berkah terbesar. Terima kasih telah menjadi pelita di saat gelap, menjadi benteng di kala rapuh. 

Bersamamu, aku adalah Raja yang paling beruntung di jagat raya. Semoga di usiamu yang baru, takhta kebahagiaan senantiasa menjadi milikmu, dan mahkota kejayaan selalu tersemat di kepalamu. 

Aku, Rajamu, akan selalu setia di sisimu, menjaga setiap jengkal kerajaan cinta kita. 

Dari abdi setiamu,
Raja Arya Ade (ADE7)`;

// ===================================================================================
// ✨ MAIN COMPONENT ✨
// ===================================================================================

export default function Home() {
  const [currentMessage, setCurrentMessage] = useState(0);
  const [showSecretMessage, setShowSecretMessage] = useState(false);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentMessage((prev) => (prev + 1) % loveMessages.length);
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  return (
    <>
      <style>{`
        @import url('https://fonts.googleapis.com/css2?family=Cinzel+Decorative:wght@400;700;900&family=Jost:wght@300;400;600;700&display=swap');
        
        .font-serif-regal { font-family: 'Cinzel Decorative', cursive; }
        .font-sans { font-family: 'Jost', sans-serif; }
        
        .majestic-bg { background-color: #0a0514; }
        .text-shadow-gold { 
          text-shadow: 
            0 0 10px rgba(252, 211, 77, 0.5), 
            0 0 20px rgba(252, 211, 77, 0.3),
            0 0 40px rgba(252, 211, 77, 0.1);
        }

        /* Enhanced Animations */
        @keyframes gentle-swing {
          0%, 100% { transform: rotate(-5deg); }
          50% { transform: rotate(5deg); }
        }
        
        @keyframes pulse-gold {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
        
        @keyframes twinkle {
          0%, 100% { opacity: 1; transform: scale(1); }
          50% { opacity: 0.3; transform: scale(0.8); }
        }
        
        @keyframes heartbeat {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.1); }
        }
        
        @keyframes float-up {
          0% { 
            transform: translateY(100vh) rotate(0deg) scale(var(--scale, 1)); 
            opacity: 0; 
          }
          10% { opacity: 1; }
          90% { opacity: 1; }
          100% { 
            transform: translateY(-100vh) rotate(360deg) scale(var(--scale, 1)); 
            opacity: 0; 
          }
        }

        .animate-gentle-swing { animation: gentle-swing 3s ease-in-out infinite; }
        .animate-pulse-gold { animation: pulse-gold 2s ease-in-out infinite; }
        .animate-twinkle { animation: twinkle 1.5s ease-in-out infinite; }
        .animate-heartbeat { animation: heartbeat 1.5s ease-in-out infinite; }

        /* Parallax Background Styles */
        .bg-night-sky { 
          background: linear-gradient(to bottom, #0a0514, #1a0f36, #3c2a66, #6d28d9); 
        }
        
        .bg-stars { 
          background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 2px, transparent 4px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 3px);
          background-size: 55px 55px, 35px 35px;
          background-position: 0 0, 20px 20px;
          opacity: 0.7;
        }
        
        .bg-mountains { 
          background: linear-gradient(transparent 60%, #0a0514), 
                     url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 120" preserveAspectRatio="none"><path d="M0 0v46.29c47.79 22.2 103.59 32.17 158 28 70.36-5.37 136.33-33.31 206.8-37.5 73.84-4.36 147.54 16.88 218.2 35.26 69.27 18 138.3 24.88 209.4 13.08 36.15-6 69.85-17.84 104.45-29.34C989.49 25 1113-14.29 1200 52.47V0z" opacity=".25" fill="%234f46e5"/><path d="M0 0v15.81c13 21.11 27.64 41.05 47.69 56.24C99.41 111.27 165 111 225.8 97.66c47.15-9.84 93.87-19.8 140.68-25.73 50.16-6.22 99.66-11.66 149.25-9.67 70.36 2.2 136.33 30.13 206.8 34.25 73.84 4.36 147.54-16.88 218.2-35.26 69.27-18 138.3-24.88 209.4-13.08 36.15 6 69.85 17.84 104.45 29.34C989.49 25 1113-14.29 1200 52.47V0z" opacity=".5" fill="%234f46e5"/><path d="M0 0v5.63C149.93 59 314.09 71.32 475.83 42.57c43-7.64 84.23-20.12 127.61-26.46 59-8.63 112.48 12.24 165.56 35.4C827.93 77.22 886 95.24 951.2 90c86.53-7 172.46-45.71 248.8-84.81V0z" fill="%234f46e5"/></svg>');
          background-size: cover;
          background-position: bottom;
          opacity: 0.4;
        }
        
        .bg-castle {
          background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 120" preserveAspectRatio="none"><path d="M0 0v46.29c47.79 22.2 103.59 32.17 158 28 70.36-5.37 136.33-33.31 206.8-37.5 73.84-4.36 147.54 16.88 218.2 35.26 69.27 18 138.3 24.88 209.4 13.08 36.15-6 69.85-17.84 104.45-29.34C989.49 25 1113-14.29 1200 52.47V0z" fill="%23d4af37" opacity=".3"/></svg>');
          background-size: cover;
          background-position: bottom;
          opacity: 0.3;
        }

        .lantern-bg {
          position: absolute;
          bottom: -150px;
          width: 80px;
          height: 80px;
          background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path d="M50 20C60 10 80 15 80 30C80 45 60 50 50 60C40 50 20 45 20 30C20 15 40 10 50 20Z" fill="%23ffd700"/><rect x="45" y="60" width="10" height="20" fill="%23ff6b6b"/><rect x="47" y="80" width="6" height="5" fill="%23ff6b6b"/></svg>');
          background-size: contain;
          background-repeat: no-repeat;
          animation: float-up linear infinite;
          filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.5));
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
          width: 8px;
        }
        
        ::-webkit-scrollbar-track {
          background: #1a0f36;
        }
        
        ::-webkit-scrollbar-thumb {
          background: linear-gradient(#d4af37, #ffd700);
          border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
          background: linear-gradient(#ffd700, #d4af37);
        }

        /* 3D transform for memory game */
        .rotate-y-180 {
          transform: rotateY(180deg);
        }

        .perspective {
          perspective: 1000px;
        }
      `}</style>

      <div className="w-full majestic-bg text-white font-sans overflow-x-hidden">
        <ScrollProgress />
        <ParallaxBackground />
        <FloatingLanterns />
        <InteractiveParticles />
        <AudioPlayer />
        <ThemeToggle />

        {/* Secret Message Modal */}
        {showSecretMessage && (
          <div className="fixed inset-0 z-[1000] flex items-center justify-center bg-black/80 backdrop-blur-sm">
            <div className="bg-gradient-to-br from-yellow-500/20 to-red-500/20 border border-yellow-400/50 rounded-2xl p-8 max-w-md mx-4 backdrop-blur-lg">
              <h3 className="text-2xl font-serif-regal text-yellow-300 mb-4 text-center">
                Pesan Rahasia Untuk Ratuku ✨
              </h3>
              <p className="text-yellow-100/90 text-center leading-relaxed mb-6">
                Setiap hari bersamamu adalah halaman baru dalam buku kehidupan yang paling indah.
                Terima kasih telah menjadi cerita terbaik dalam hidupku. 💖
              </p>
              <button
                onClick={() => setShowSecretMessage(false)}
                className="w-full bg-yellow-500/80 hover:bg-yellow-500 text-gray-900 font-bold py-3 rounded-lg transition-all duration-300 hover:scale-105"
              >
                Tutup Pesan
              </button>
            </div>
          </div>
        )}

        <header className="h-screen flex flex-col items-center justify-center text-center p-6 relative">
          <div className="relative z-10">
            <p className="text-xl md:text-2xl font-sans text-yellow-300/80 mb-4 animate-pulse">
              Persembahan Agung dari Kerajaan Hati
            </p>
            <h1 className="text-6xl md:text-8xl font-serif-regal font-bold mb-6 text-shadow-gold">
              Untuk Sang Ratu
            </h1>
            <p className="text-2xl md:text-3xl font-serif-regal text-white/90 italic max-w-2xl mx-auto mb-10">
              Rofiatul Karomah
            </p>

            {/* Animated Love Message */}
            <div className="max-w-2xl mx-auto mb-12 h-20">
              <div className="bg-gray-900/40 backdrop-blur-md rounded-lg p-4 border border-yellow-400/20">
                <p className="text-yellow-200/80 text-lg italic transition-all duration-1000">
                  {loveMessages[currentMessage]}
                </p>
              </div>
            </div>

            {/* Countdown to Next Anniversary */}
            <div className="mb-12">
              <h3 className="text-xl text-yellow-300/70 mb-4">Menuju Ulang Tahun Berikutnya</h3>
              <CountdownTimer targetDate={new Date(new Date().getFullYear() + 1, 0, 1)} />
            </div>

            <ConfettiButton>
              <button
                className="bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-gray-900 font-bold text-lg py-4 px-8 rounded-full transition-all duration-300 transform hover:scale-110 hover:shadow-2xl shadow-lg flex items-center gap-3"
                onClick={() => setShowSecretMessage(true)}
              >
                <HeartIcon className="w-6 h-6" beating={true} />
                Buka Pesan Rahasia
                <StarIcon className="w-6 h-6" twinkling={true} />
              </button>
            </ConfettiButton>

            <div className="absolute bottom-[-10vh] left-1/2 -translate-x-1/2 text-yellow-300 animate-bounce">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
              </svg>
            </div>
          </div>
        </header>

        <main className="max-w-7xl mx-auto px-6 py-20 sm:py-28 space-y-32 relative z-10">
          {/* Royal Decree Section */}
          <AnimatedSection>
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-5xl font-serif-regal font-bold text-shadow-gold">
                Titah Agung Sang Raja
              </h2>
              <p className="text-lg text-yellow-300/70 italic mt-2">
                Sebuah dekrit yang tertulis dari lubuk hati terdalam
              </p>
            </div>
            <div className="bg-gradient-to-br from-gray-900/60 to-purple-900/40 backdrop-blur-md max-w-4xl mx-auto p-8 md:p-12 rounded-2xl shadow-2xl border border-yellow-400/30 relative overflow-hidden">
              <div className="absolute top-4 left-4 text-yellow-400/20">
                <CrownIcon className="w-12 h-12" />
              </div>
              <div className="absolute bottom-4 right-4 text-yellow-400/20">
                <CrownIcon className="w-12 h-12" />
              </div>
              <p className="text-yellow-100/80 leading-loose whitespace-pre-line text-lg text-center relative z-10">
                <Typewriter text={royalDecree} speed={30} />
              </p>
            </div>
          </AnimatedSection>

          {/* Timeline Section */}
          <AnimatedSection>
            <div className="text-center mb-20">
              <h2 className="text-4xl md:text-5xl font-serif-regal font-bold text-shadow-gold">
                Tawarikh Emas Kerajaan Kita
              </h2>
              <p className="text-lg text-yellow-300/70 italic mt-2">
                Setiap prasasti adalah tonggak sejarah perjalanan cinta
              </p>
            </div>
            <div className="space-y-20 relative">
              {/* Timeline line */}
              <div className="absolute left-1/2 transform -translate-x-1/2 w-1 bg-gradient-to-b from-yellow-400 to-transparent h-full hidden md:block"></div>

              {timelineEvents.map((event, index) => (
                <div
                  key={index}
                  className={`flex flex-col md:flex-row items-center gap-10 relative ${index % 2 !== 0 ? 'md:flex-row-reverse' : ''
                    }`}
                >
                  {/* Timeline dot */}
                  <div className="absolute left-1/2 transform -translate-x-1/2 w-6 h-6 bg-yellow-500 rounded-full border-4 border-gray-900 z-10 hidden md:block"></div>

                  <div className="w-full md:w-5/12">
                    <div className={`bg-gradient-to-br ${event.color} backdrop-blur-sm border border-yellow-400/30 rounded-2xl p-6 transition-all duration-500 hover:scale-105 hover:border-yellow-400/60`}>
                      <div className="flex items-center gap-3 mb-3">
                        <span className="text-2xl">{event.icon}</span>
                        <p className="text-yellow-400 font-bold text-lg">{event.year}</p>
                      </div>
                      <h3 className="text-2xl font-serif-regal font-bold my-2">{event.title}</h3>
                      <p className="text-yellow-100/80 leading-relaxed">{event.desc}</p>
                    </div>
                  </div>

                  <div className="w-full md:w-7/12 group">
                    <img
                      src={event.image}
                      alt={event.title}
                      className="w-full aspect-video object-cover rounded-2xl shadow-2xl border-4 border-yellow-500/30 transition-all duration-500 group-hover:scale-105 group-hover:border-yellow-500/50"
                      onError={(e) => {
                        e.target.onerror = null;
                        e.target.src = `https://placehold.co/800x400/1a0f36/fcd34d?text=${encodeURIComponent(event.title)}`;
                      }}
                    />
                  </div>
                </div>
              ))}
            </div>
          </AnimatedSection>

          {/* Queen's Qualities Section */}
          <AnimatedSection>
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-5xl font-serif-regal font-bold text-shadow-gold">
                Kemuliaan Sang Ratu
              </h2>
              <p className="text-lg text-yellow-300/70 italic mt-2">
                Sifat-sifat agung yang membangun takhta di hatiku
              </p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
              {queenQualities.map((quality, index) => (
                <div
                  key={index}
                  className={`bg-gradient-to-br ${quality.gradient} border border-yellow-400/20 rounded-2xl p-6 text-center backdrop-blur-sm transform transition-all duration-500 hover:border-yellow-400/50 hover:-translate-y-3 hover:shadow-2xl group`}
                >
                  <div className="text-yellow-400 w-16 h-16 mx-auto mb-4 flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                    {quality.icon}
                  </div>
                  <h3 className="text-xl font-serif-regal font-bold mb-3">{quality.title}</h3>
                  <p className="text-yellow-100/70 leading-relaxed">{quality.desc}</p>
                </div>
              ))}
            </div>
          </AnimatedSection>

          {/* Interactive Memory Game Section */}
          <AnimatedSection>
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-5xl font-serif-regal font-bold text-shadow-gold">
                Permainan Kenangan
              </h2>
              <p className="text-lg text-yellow-300/70 italic mt-2">
                Temukan pasangan yang cocok, seperti kita berdua
              </p>
            </div>
            <MemoryGame />
          </AnimatedSection>

          {/* Gallery Section */}
          <AnimatedSection>
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-5xl font-serif-regal font-bold text-shadow-gold">
                Balairung Kenangan
              </h2>
              <p className="text-lg text-yellow-300/70 italic mt-2">
                Lukisan abadi dari setiap momen berharga
              </p>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 perspective">
              {galleryImages.map((image, index) => (
                <div
                  key={index}
                  className="group relative bg-gradient-to-br from-yellow-800 to-yellow-900 rounded-xl shadow-2xl transform transition-all duration-500 hover:!scale-105 hover:-rotate-1 hover:z-20"
                >
                  <img
                    src={image.src}
                    onError={(e) => {
                      e.target.onerror = null;
                      e.target.src = `https://placehold.co/400x400/1a0f36/fcd34d?text=Kenangan+${index + 1}`;
                    }}
                    alt={image.caption}
                    className="w-full h-48 object-cover rounded-lg border-2 border-yellow-600/50 transition-all duration-300 group-hover:border-yellow-400/80"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500 flex flex-col justify-end p-4 rounded-lg">
                    <p className="text-white font-bold text-sm">{image.caption}</p>
                    <p className="text-yellow-300 text-xs">{image.date}</p>
                  </div>
                  <div className="absolute top-2 right-2 bg-yellow-500 text-gray-900 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold">
                    {index + 1}
                  </div>
                </div>
              ))}
            </div>
          </AnimatedSection>

          {/* Love Letter Section */}
          <AnimatedSection>
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-5xl font-serif-regal font-bold text-shadow-gold">
                Surat Cinta Abadi
              </h2>
              <p className="text-lg text-yellow-300/70 italic mt-2">
                Kata-kata yang tak pernah cukup untuk menggambarkan cintaku
              </p>
            </div>
            <div className="max-w-4xl mx-auto">
              <div className="bg-gradient-to-br from-pink-500/10 to-red-500/10 border border-pink-400/30 rounded-2xl p-8 backdrop-blur-md">
                <div className="text-center mb-8">
                  <HeartIcon className="w-16 h-16 text-pink-400 mx-auto mb-4" beating={true} />
                  <h3 className="text-2xl font-serif-regal text-pink-300 mb-4">
                    Untuk Rofiatul Karomah, Cintaku
                  </h3>
                </div>

                <div className="space-y-6 text-pink-100/90 leading-relaxed text-lg">
                  <p className="text-center italic">
                    "Jika cinta diukur dengan kata-kata, maka aku akan menulis sampai tinta dunia habis."
                  </p>

                  <p>
                    Setiap pagi ketika matahari terbit, aku bersyukur karena diberikan kesempatan
                    untuk menghirup udara yang sama denganmu. Setiap malam ketika bintang-bintang
                    bermunculan, aku berharap bisa menjadi bintang yang menerangi langit malammu.
                  </p>

                  <p>
                    Kamu adalah alasan mengapa aku percaya pada takdir. Pertemuan kita bukan
                    kebetulan, tetapi rangkaian peristiwa sempurna yang dirancang oleh alam semesta
                    untuk menyatukan dua jiwa yang saling melengkapi.
                  </p>

                  <p className="text-center font-serif-regal text-pink-300 text-xl mt-8">
                    Selamanya milikmu,
                    <br />
                    <span className="text-yellow-300">Arya Ade</span>
                  </p>
                </div>

                <div className="flex justify-center mt-8">
                  <ConfettiButton>
                    <button className="bg-gradient-to-r from-pink-500 to-red-500 hover:from-pink-600 hover:to-red-600 text-white font-bold py-3 px-8 rounded-full transition-all duration-300 transform hover:scale-105 flex items-center gap-2">
                      <HeartIcon className="w-5 h-5" />
                      Kirim Cinta
                    </button>
                  </ConfettiButton>
                </div>
              </div>
            </div>
          </AnimatedSection>
        </main>

        <footer className="text-center py-16 px-6 border-t border-yellow-400/10 mt-20 relative z-10 bg-gradient-to-t from-gray-900 to-transparent">
          <div className="max-w-4xl mx-auto">
            <LanternIcon className="w-16 h-16 text-yellow-400 mx-auto mb-6 animate-gentle-swing" />
            <p className="text-yellow-200/70 text-xl mb-4">
              Semoga lampion-lampion harapan ini menerangi jalanmu,
            </p>
            <p className="text-3xl font-serif-regal font-bold text-white mb-6 text-shadow-gold">
              Selamat Ulang Tahun, Ratuku.
            </p>
            <div className="flex justify-center gap-6 mb-6">
              <HeartIcon className="w-8 h-8 text-red-400 animate-heartbeat" />
              <StarIcon className="w-8 h-8 text-yellow-300 animate-twinkle" />
              <CrownIcon className="w-8 h-8 text-yellow-400 animate-pulse-gold" />
              <LanternIcon className="w-8 h-8 text-orange-400 animate-gentle-swing" />
            </div>
            <p className="text-yellow-200/50 text-sm">
              &copy; {new Date().getFullYear()} - Dengan cinta abadi dari Rajamu, ADE7.
            </p>
          </div>
        </footer>
      </div>
    </>
  );
}